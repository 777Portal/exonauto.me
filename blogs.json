{"UUID2":{"title":"I finished the blog","headline":"I, ExonAuto, have finally finished writing the blog code","content":"<h3>Hello!</h3><p>I finally got around to doing the blogs stuff!</p><p>its probably a bit scuffed, but I plan on redoing the entire frontend in vue because doing stuff is super annoying w/ vanilla js / html and it would be nice to learn</p><p>So, enjoy it while it lasts! And thanks for taking the time to read this!</p>"},"generating-images-satori-resvg":{"title":"Generating images from html in node with satori + resvg","headline":"Generating images from html in node 22 with satori, satori-html, Resvg, and a little bit of work!","content":"<h3>Dynamically generated thumbnails!</h3>\n<p>Thats right, its a blog update.</p>\n<p>I now generate og/meta images using satori + Resvg based on a html template, in node!</p>\n<h2 id=\"setup\">Setup</h2>\n<hr>\n<p>(this is using ESM, not commonjs - I recently ported my project to ESM as part of this so thought i should mention)</p>\n<p>install the modules</p>\n<pre>\n  npm i satori\n  npm i satori-html\n  npm i @resvg/resvg-js\n</pre>\n<p>we create our main file and import our modules</p>\n\n<pre>\n  import satori from \"satori\";\n  import { html } from \"satori-html\";\n  import { Resvg } from \"@resvg/resvg-js\";\n\n  import {fileURLToPath} from 'url';\n  import path from 'path';\n</pre>\n\n<p>basically, I take a template from a html template existing in the filesystem, and replace certain tags.</p>\n<p> make template.html in the root of your project (or wherever you want it- really)</p>\n\n<pre>\n  &lt;!DOCTYPE html&gt;\n  &lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;style&gt;\n  * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n  }\n  body {\n      width: 1200px;\n      height: 628px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: black;\n      background-image: radial-gradient(circle, #ffffff 1px, black 1px);\n      background-size: 40px 40px;\n      color: white;\n      font-family: sans-serif;\n      margin: 0 auto;\n  }\n  .container {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 50px;\n  }\n  .container img {\n      width: 500px;\n      height: 500px;\n      flex-shrink: 0;\n  }\n  .text {\n      display: flex;\n      flex-direction: column;\n      padding-left: 50px;\n      flex-grow: 1;\n      justify-content: center;\n  }\n  .text h1 {\n      font-size: 48px;\n      margin-bottom: 20px;\n  }\n  .text p {\n      font-size: 24px;\n  }\n  &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;div class=&quot;container&quot;&gt;\n      &lt;img src=&quot;https://cataas.com/cat?type=square&quot; alt=&quot;Random Cat&quot;&gt;\n      &lt;div class=&quot;text&quot;&gt;\n          &lt;h1&gt;{{title}}&lt;/h1&gt;\n          &lt;hr&gt;\n          &lt;p&gt;{{headline}}&lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</pre>\n\n<p class=\"callout-info\"><strong>Fonts:</strong> you need a font to render text. I used <a href=\"https://rubjo.github.io/victor-mono/\">Victor Mono</a>, but as long as its a .ttf or .otf it should work</p>\n<p>and finally, some code in our main file.</p>\n<pre>\n  const __filename = fileURLToPath(import.meta.url);\n  const __dirname = path.dirname(__filename);\n\n  async function generateImage(title, headline){\n    const templatePath = path.join(__dirname, 'template.html');\n\n    let template = await fs.readFile(templatePath, 'utf8');\n\n    template = template\n      .replaceAll('{{title}}', title)\n      .replaceAll('{{headline}}', headline)\n\n    const markup = html(template);\n\n    const fontData = await fs.readFile(\n      \"VictorMono-Regular.ttf\"\n    );\n\n    const svg = await satori(markup, {\n      width: 1200,\n      height: 628,\n      fonts: [\n        {\n          name: \"Arial\",\n          data: fontData,\n          weight: \"auto\",\n          style: \"normal\",\n        },\n      ],\n\n    });\n\n\n    const resvg = new Resvg(svg, {\n      background: \"rgba(255, 255, 255, 1)\",\n    });\n\n    const pngData = resvg.render();\n    const pngBuffer = pngData.asPng();\n    fs.writeFile(\"./generated/\" + title + \".png\", pngBuffer)\n  }\n</pre>\n\n<p>finally, we can generate images with a simple function call</p>\n<pre>\n  generateImage('awesome', 'sauce');</pre>\n\n<h2 id=\"setup\">Conclusion</h2>\n<hr>\n<p>Satori + resvg is a powerful combination, with the code I provided, you should be able to make any type of image you want from html!</p>\n<p>I really need to make a comment section, but if you need anything / just want to tell me something, feel free to email me <pre>vesania at exonauto.me</pre></p>\n<p>Thanks for reading, have a wonderful day :)</p>"},"Default ID":{"title":"Default Title","key":"Default ID","headline":"Default Headline","content":"<h3>A title!</h3>\n<hr>\n<p>Some content!</p>"}}